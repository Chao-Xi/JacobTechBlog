{{- if eq .Values.database.type "internal" -}}
{{- $database := .Values.persistence.persistentVolumeClaim.database -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "polling.database" . }}"
  labels:
{{ include "polling.labels" . | indent 4 }}
    component: database
spec:
  serviceName: "{{ template "polling.database" . }}"
  selector:
    matchLabels:
{{ include "polling.matchLabels" . | indent 6 }}
      component: database
  template:
    metadata:
      labels:
{{ include "polling.labels" . | indent 8 }}
        component: database
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/database/database-secret.yaml") . | sha256sum }}
{{- if .Values.database.podAnnotations }}
{{ toYaml .Values.database.podAnnotations | indent 8 }}
{{- end }}
    spec:
      containers:
      - name: database
        image: {{ .Values.database.internal.image.repository }}:{{ .Values.database.internal.image.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        ports:
          - name: db
            containerPort: 3306
            protocol: TCP
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
{{- if .Values.database.internal.resources }}
        resources:
{{ toYaml .Values.database.internal.resources | indent 10 }}
{{- end }}
        env:
          - name: MYSQL_ALLOW_EMPTY_PASSWORD
            value: "1"
          - name: MYSQL_DATABASE
            value: {{ .Values.database.internal.database }}
          - name: MYSQL_USER
            value: {{ .Values.database.internal.username }}
        envFrom:
          - secretRef:
              name: "{{ template "polling.database" . }}"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/mysql
          subPath: {{ $database.subPath }}
      {{- if not .Values.persistence.enabled }}
      volumes:
      - name: "database-data"
        emptyDir: {}
      {{- else if $database.existingClaim }}
      volumes:
      - name: "database-data"
        persistentVolumeClaim:
          claimName: {{ $database.existingClaim }}
      {{- end -}}
    {{- with .Values.database.internal.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.database.internal.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.database.internal.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
  {{- if and .Values.persistence.enabled (not $database.existingClaim) }}
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
{{ include "polling.labels" . | indent 8 }}
    spec:
      accessModes: [{{ $database.accessMode | quote }}]
      {{- if $database.storageClass }}
      {{- if (eq "-" $database.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ $database.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ $database.size | quote }}
  {{- end -}}
  {{- end -}}
