def label = "mypod-${UUID.randomUUID().toString()}"

//代码扫描
def SonarScan(projectType,skipSonar,srcDir,serviceName){
    def scanHome = "/usr/local/sonar-scanner"
    if (projectType == 'java'){
        if ("${buildType}" == 'gradle'){
            codepath = 'build/classes'
        } else{
            codepath = 'target/classes'
        }
        try {
            sh """
                cd ${srcDir} 
                ${scanHome}/bin/sonar-scanner -Dsonar.projectName=${serviceName} -Dsonar.projectKey=${serviceName}  \
                -Dsonar.sources=src/main -Dsonar.tests=src/test -Dsonar.language=java -Dsonar.sourceEncoding=UTF-8 \
                -Dsonar.java.binaries=${codepath} -Dsonar.java.coveragePlugin=jacoco \
                -Dsonar.jacoco.reportPath=target/jacoco.exec -Dsonar.junit.reportsPath=target/surefire-reports \
                -Dsonar.surefire.reportsPath=target/surefire-reports -Dsonar.projectDescription='devopsdevops'
             """ 
        } catch (e){
            currentBuild.description="代码扫描失败!"
            error '代码扫描失败!'
        }
    }
}

//docker
podTemplate(
    label: label,
    cloud: 'kubernetes', 
    containers: [ 
        containerTemplate(
            name: 'jnlp',
            image: 'openshift/jenkins-slave-maven-centos7:v3.11',
            ttyEnabled: true,
            privileged: false,
            alwaysPullImage: false,
            args: '${computer.jnlpmac} ${computer.name}',
            //resourceRequestCpu: '1000m',
           // resourceLimitCpu: '1000m',
           // resourceRequestMemory: '2Gi',
           // resourceLimitMemory: '2Gi',
            envVars: [
                envVar(key: 'PATH', value: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/apache-maven-3.5.0/bin'),
                envVar(key: 'CLASS_PATH', value: '/docker-java-home/jre/lib/rt.jar:/docker-java-home/jre/lib/dt.jar:/docker-java-home/jre/lib/tools.jar')]
        )
    ],
    //volumes: [persistentVolumeClaim(mountPath: '/etc/data/', claimName: 'pv-jenkins')],
    //idleMinutes: '60',
    //activeDeadlineSeconds: '60',
    slaveConnectTimeout: '60'
    ){
        node(label) {
            ws("${workspace}"){
                stage('GetCode'){
                    println("hello")
                    checkout scm
                }
                
                stage('Build'){
                     sh "mvn clean install -DskipTests"
                     sh "ls target/ "
                  
                }
          
                stage('CodeScan'){
                   // SonarScan('java',skipSonar,srcDir,serviceName)
                   println("hello")
                }
                
            }
        }
}
